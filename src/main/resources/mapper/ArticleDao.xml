<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.community.dao.ArticleDao">
    <resultMap id="articleMapper" type="com.community.entity.Article">
        <id column="id" property="id" javaType="java.lang.Integer"></id>
        <association property="user" column="user_id" select="com.community.dao.UserDao.findById"
                     javaType="com.community.entity.User"></association>
        <association property="fromArticle" column="tag_id"
                     select="com.community.dao.ArticleDao.findById"></association>
        <association property="articleType" column="article_type_id"
                     select="com.community.dao.ArticleTypeDao.findById"></association>
        <collection property="readUserList" column="id"
                    select="com.community.dao.UserArticleReadDao.findUserListByArticleId"></collection>
        <collection property="keepUserList" column="id"
                    select="com.community.dao.UserArticleKeepDao.findUserListByArticleId"></collection>
        <collection property="loveUserList" column="id"
                    select="com.community.dao.UserArticleLoveDao.findUserListByArticleId"></collection>
        <collection property="commentList" ofType="com.community.entity.Comment" column="id"
                    select="com.community.dao.CommentDao.findAllByArticleId"></collection>
        <collection property="tagList" ofType="com.community.entity.Comment" column="id"
                    select="com.community.dao.TagDao.findAllByArticleId"></collection>
    </resultMap>
    <select id="findById" resultMap="articleMapper" parameterType="Integer">
        select * from tb_article where id = #{param}
    </select>
    <select id="findAll" resultMap="articleMapper">
        select * from tb_article
    </select>
    <select id="findAllByShowType" resultMap="articleMapper" parameterType="Integer">
        <choose>
            <when test="showTypeId == 1">
                select * from tb_article
                order by create_time desc
            </when>
            <when test="showTypeId == 2">
                select * from tb_article
                where is_recommend = 1
            </when>
            <when test="showTypeId == 3">
                select *,
                (select count(*) from tb_user_article_love ua where ua.article_id = a.id) AS count_b
                from tb_article a order by count_b desc
            </when>
        </choose>
    </select>
    <select id="findAllByArticleTypeId" resultMap="articleMapper" parameterType="Integer">
        select * from tb_article where article_type_id = #{param}
    </select>
    <select id="findAllByArticleTypeIdAndShowType" resultMap="articleMapper">
        <choose>
            <when test="showTypeId == 1">
                select * from tb_article where article_type_id = #{articleTypeId}
                order by create_time desc
            </when>
            <when test="showTypeId == 2">
                select * from tb_article where article_type_id = #{articleTypeId}
                and is_recommend = 1
            </when>
            <when test="showTypeId == 3">
                select *,
                (select count(*) from tb_user_article_love ua where ua.article_id = a.id) AS count_b
                from tb_article a where article_type_id = #{articleTypeId} order by count_b desc
            </when>
        </choose>
    </select>

    <insert id="insert" parameterType="com.community.entity.Article"  keyProperty="id" useGeneratedKeys="true" >
        insert into tb_article(article_type_id,title,content,original,user_id,create_time) values(#{articleType.id},#{title},#{content},#{original},#{user.userId},#{createTime})
    </insert>
    <update id="update" parameterType="com.community.entity.Article">
        update tb_article set  title = #{title}, article_type_id = #{articleType.id},content = #{content},
                original = #{original},from_article_id = #{fromArticle.id},update_time = now()
        where id = #{id}
    </update>
    <select id="findAllUserByArticleIds" parameterType="java.util.List" resultMap="com.community.dao.UserDao.userMapper">
        select DISTINCT(user_id),user_name,icon_id from tb_article,tb_user where tb_article.user_id = tb_user.id and tb_article.id in
        <foreach collection="list" index="index" item="item" open="(" separator="," close=")">
            #{item}
        </foreach>
        LIMIT 5
    </select>
    <select id="findAllArticleListByArticleIds" parameterType="java.util.List" resultType="com.community.entity.Article">
        select * from tb_article where id in
        <foreach collection="list" index="index" item="item" open="(" separator="," close=")">
            #{item}
        </foreach>
        LIMIT 5
    </select>

</mapper>